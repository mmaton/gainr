{{- $createAdminCredentials := not (lookup "v1" "Secret" .Release.Namespace "emx-admin-credentials") }}

{{- if $createAdminCredentials }}
# Only run this job if the secrets don't already exist in the namespace
apiVersion: batch/v1
kind: Job
metadata:
  name: emxq-generate-admin-password
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    metadata:
      name: emxq-generate-admin-password
    spec:
      restartPolicy: Never
      serviceAccountName: emxq-generate-admin-password
      volumes:
        - name: &volume-name shared
          emptyDir: {}
        - name: &kube kube
          emptyDir: {}
      initContainers:
      - name: generate
        image: "python:3.12-slim"
        volumeMounts:
          - &passwords
            name: *volume-name
            mountPath: /credentials
        env: &env
          - name: PASSWORD_PATH
            value: /credentials/passwords
        command:
          - sh
          - '-c'
          - |
            set -ex

            mkdir $PASSWORD_PATH; cd $PASSWORD_PATH

            cat <<EOF > /tmp/generate_pass.py
            import random
            import string

            lower = string.ascii_lowercase
            upper = string.ascii_uppercase
            num = string.digits
            print("".join(random.sample(lower + upper + num, 18)))
            EOF

            python /tmp/generate_pass.py > password.out

            chown -R 1001 $PASSWORD_PATH #kubectl runs as this user and needs to read the keys

      containers:
      - name: create-secrets
        image: {{ template "kubectl" .Capabilities.KubeVersion }}
        volumeMounts:
          - *passwords
          - name: *kube
            mountPath: /.kube
        env: *env
        command:
          - sh
          - '-c'
          - |
            set -ex
            sleep 5  # Wait for networking to reach k8s API
            kubectl create secret generic --from-literal=username=admin --from-literal=password=$(cat $PASSWORD_PATH/password.out) emx-admin-credentials
---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: emxq-generate-admin-password
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-100"
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "get"]
- apiGroups: [""]
  resources: ["pods", "services"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create"]

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: emxq-generate-admin-password
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-100"
    "helm.sh/hook-delete-policy": before-hook-creation

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: emxq-generate-admin-password
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-100"
    "helm.sh/hook-delete-policy": before-hook-creation
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: emxq-generate-admin-password
subjects:
- kind: ServiceAccount
  name: emxq-generate-admin-password
  namespace: {{ .Release.Namespace }}
{{- end }}
